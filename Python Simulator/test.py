import unittest
from eventgame import EventGame
from player import Player

class TestStringMethods(unittest.TestCase):
  def setUp(self):
    print("Welcome to Square Game")
    player_list = list()
    for i in range(0, 4):
      player_list.append(Player(f"Player_{i + 1}"))
    self.game = EventGame(player_list)
    self.game.start_game(13, 4)
    self.board = [{(15,15), (15,14)}, {(15,14), (16,14)}, {(16,14), (17,14)}, {(17,14), (17,15)}, {(17,15), (16,15)}]
    self.moves = [
      ((1, 9, 1, 16, 16), [{(16,14), (16,15)}, {(15,15), (16,15)}, {(15,15), (15,16)}]),
      ((1, 5, 2, 17, 15), [{(15,16), (16,16)}, {(16,16), (17,16)}, {(17,16), (17,15)}, {(16,16), (16,15)}]),
      ((1, 8, 4, 13, 15), [{(15,15), (14,15)}, {(14,15), (13,15)}, {(15,14), (14,14)}, {(14,14), (13,14)}, {(13,15), (13,14)}, {(14,15), (14,14)}]),
      ((2, 4, 1, 14, 17), [{(13,15), (13,16)}, {(13,16), (13,17)}, {(14,15), (14,16)}, {(13,16), (14,16)}, {(13,17), (14,17)}]),
      ((3, 5, 7, 15, 16), [{(14,16), (15,16)}, {(14,17), (15,17)}, {(14,16), (14,17)}, {(14,17), (14,18)}]),
      ((3, 6, 2, 17, 16), [{(15,16), (15,17)}, {(16,16), (16,17)}, {(17,16), (17,17)}, {(15,17), (16,17)}, {(16,17), (17,17)}]),
      ((3, 15, 2, 15, 17), [{(15,17), (15,18)}, {(15,18), (14,18)}, {(14,18), (13,18)}]),
      ((3, 3, 1, 16, 19), [{(15,19), (16,19)}, {(15,18), (16,18)}, {(15,18), (15,19)}, {(16,17), (16,18)}]),
      ((4, 3, 1, 17, 19), [{(17,19), (16,19)}, {(17,18), (16,18)}, {(16,18), (16,19)}, {(17,18), (17,17)}]),
      ((4, 16, 1, 14, 19), [{(14,19), (14,18)}, {(14,19), (13,19)}, {(13,19), (13,18)}, {(13,18), (13,17)}]),
      ((4, 11, 6, 15, 20), [{(15,20), (15,19)}, {(14,19), (15,19)}, {(14,19), (14,20)}, {(14,20), (13,20)}, {(13,19), (13,20)}]),
      ((4, 15, 2, 16, 19), [{(16,19), (16,20)}, {(15,20), (16,20)}, {(14,20), (15,20)}]),
      ((4, 5, 2, 18, 19), [{(18,19), (18,20)}, {(18,20), (17,20)}, {(17,19), (17,20)}, {(17,20), (16,20)}]),
      ((1, 1, 2, 19, 18), [{(19,18), (19,19)},{(18,19), (19,19)},{(18,19), (17,19)},{(17,19), (17,18)}, {(17, 18), (18,18)},{(18,18), (18,19)}]),
      ((1, 12, 4, 17, 18), [{(17, 17), (18,17)}, {(19, 17), (18,17)}, {(18, 17), (18,18)}, {(19, 18), (18,18)}]),
      ((1, 7, 1, 20, 18), [{(20, 18), (19,18)}, {(19, 17), (19,18)}, {(19, 17), (19,16)}, {(19, 17), (20,17)}, {(20, 17), (20,18)}]),
      ((2, 14, 4, 18, 17), [{(18, 17), (18,16)}, {(18, 16), (19,16)}, {(20, 16), (19,16)}, {(20, 17), (20,16)}]),
      ((2, 5, 5, 17, 16), [{(17, 16), (18,16)}, {(18, 15), (18,16)}, {(18, 15), (18,14)}, {(18, 15), (17,15)}]),
      ((2, 16, 6, 19, 15), [{(18, 15), (19,15)}, {(19, 15), (19,14)}, {(18, 14), (19,14)}, {(18, 14), (17,14)}]),
      ((2, 11, 2, 21, 15), [{(21, 15), (21,16)}, {(21, 16), (20,16)}, {(20, 15), (20,16)}, {(20, 15), (19,15)}, {(19, 16), (19,15)}]),
      ((2, 7, 6, 21, 15), [{(21, 15), (20,15)},{(20, 15), (20,14)},{(20, 14), (19,14)},{(20, 14), (21,14)},{(21, 15), (21,14)}]),
      ((2, 6, 1, 13, 16), [{(13, 16), (12,16)}, {(12, 15), (12,16)}, {(12, 15), (13,15)}, {(12, 15), (12,14)}, {(13, 14), (12,14)}]),
      ((2, 12, 4, 11, 18), [{(11, 17), (12,17)}, {(13, 17), (12,17)}, {(12, 18), (12,17)}, {(13, 18), (12,18)}]),
      ((3, 13, 1, 12, 18), [{(11, 18), (12,18)}, {(11, 18), (11,17)}, {(11, 17), (11,16)}, {(11, 16), (12,16)}, {(12, 16), (12,17)}]),
      ((3, 2, 2, 12, 14), [{(11, 14), (12,14)}, {(11, 14), (10,14)}, {(11, 14), (11,15)}, {(11, 15), (10,15)}, {(11, 15), (12,15)}]),
      ((3, 16, 1, 11, 16), [{(11, 16), (11,15)}, {(11, 16), (10,16)}, {(10, 16), (10,15)}, {(10, 14), (10,15)}]),
      ((3, 4, 8, 11, 19), [{(11, 19), (11,20)}, {(11, 20), (12,20)}, {(12, 20), (13,20)}, {(12, 20), (12,19)}, {(12, 19), (13,19)}]),
      ((3, 14, 2, 12, 18), [{(12, 18), (12,19)}, {(12, 19), (11,19)}, {(10, 19), (11,19)}, {(10, 18), (10,19)}]),
      ((3, 9, 5, 10, 19), [{(11, 18), (11,19)}, {(11, 18), (10,18)}, {(10, 18), (10,17)}]),
      ((3, 7, 8, 9, 16), [{(9, 16), (10,16)}, {(10, 16), (10,17)}, {(10, 17), (11,17)}, {(10, 17), (9,17)}, {(9, 16), (9,17)}]),
      ((3, 8, 4, 8, 19), [{(8, 19), (9,19)}, {(9, 19), (10,19)}, {(9, 19), (9,18)}, {(9, 18), (10,18)}, {(9, 18), (8,18)}, {(8, 18), (8,19)}]),
      ((4, 6, 1, 10, 15), [{(10, 15), (9,15)}, {(9, 15), (9,14)}, {(10, 14), (9,14)}, {(9, 13), (9,14)}, {(9, 13), (10,13)}]),
      ((1, 4, 1, 18, 22), [{(18, 22), (17,22)}, {(17, 22), (17,21)}, {(17, 21), (17,20)}, {(17, 21), (18,21)}, {(18, 21), (18,20)}]),
      ((2, 9, 1, 19, 22), [{(18, 22), (18,21)}, {(18, 21), (19,21)}, {(19, 21), (19,20)}]),
      ((3, 1, 7, 9, 14), [{(9, 14), (8,14)}, {(8, 15), (8,14)}, {(8, 15), (8,16)}, {(9, 16), (8,16)}, {(9, 16), (9,15)}, {(9, 15), (8,15)}]),
      ((3, 12, 7, 9, 16), [{(8, 16), (8,17)}, {(8, 18), (8,17)}, {(8, 17), (9,17)}, {(9, 17), (9,18)}]),
      ((3, 11, 1, 20, 22), [{(20, 22), (19,22)}, {(19, 22), (19,21)}, {(19, 21), (20,21)}, {(20, 21), (20,20)}, {(19, 20), (20,20)}]),
      ((3, 10, 1, 11, 14), [{(10, 14), (10,13)}, {(10, 13), (10,12)}, {(10, 13), (11,13)}]),
      ((4, 8, 1, 16, 22), [{(16, 22), (16,21)}, {(16, 21), (16,20)}, {(16, 21), (15,21)}, {(15, 21), (15,20)}, {(15, 21), (15,22)}, {(15, 22), (16,22)}])
    ]

  def test_game(self):
    for move in self.moves:
      self.game.move(move[0][0], move[0][1], move[0][2], move[0][3], move[0][4])
      self.board.extend(move[1])
      self.assertEqual(frozenset(getGameBoard(self.game)), frozenset(map(lambda line: frozenset(line), self.board)))

def getGameBoard(game):
  board = game.get_board()
  line_list = board.line_list
  lines = map(lambda line: frozenset(line[0]), line_list)
  return lines

if __name__ == '__main__':
  unittest.main()


'''''
Game moves:
Red - 13, 4 //position - 15, 15
Blue - 9, 1, 16, 16
Blue - 5, 2, 17, 15
Blue - 8, 4, 13, 15
Yellow - 4, 1, 14, 17
Green - 5, 7, 15, 16
Green - 6, 2, 17, 16
Green - 15, 2, 15, 17
Green - 3, 1, 16, 19
Red - 3, 1, 17, 19
Red - 16, 1, 14, 19
Red - 11 , 6, 15, 20
Red - 15, 2, 16, 19
Red - 5, 2, 18, 19
Blue - 1, 2, 19, 18
Blue - 12, 4, 17, 18
Blue - 7, 1, 20, 18
Yellow - 14, 4, 18, 17
Yellow - 5, 5, 17, 16
Yellow - 16, 6, 19, 15
Yellow - 11, 2, 21, 15
Yellow - 7, 6, 21, 15
Yellow - 6, 1, 13, 16
Yellow - 12, 4, 11, 18
Green - 13, 1, 12, 18
Green - 2, 2, 12, 14
Green - 16, 1, 11, 16
Green - 4, 8, 11, 19
Green - 14, 2, 12, 18
Green - 9, 5, 10, 19
Green - 7, 8, 9, 16
Green - 8, 4, 9, 19
Red - 6, 1, 10, 15
Blue - 4, 1, 18, 22
Yellow - 9, 1, 19, 22
Green - 1, 7, 9, 14
Green - 12, 7, 9, 16
Green - 11, 1, 20, 22
Green - 10, 1, 11, 14
Red - 8, 1, 16, 22
'''''
